def divide_and_conquer_sequence(m, n):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏ö‡∏ö Divide and Conquer ‡∏à‡∏≤‡∏Å m ‡∏ñ‡∏∂‡∏á n"""
    if n < m: # Base case ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        return [] # ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ß‡πà‡∏≤‡∏á

    if m == n: # Base case ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        return [m] # ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ñ‡∏∑‡∏≠ m

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ï‡πà‡∏¢‡∏∑‡∏î‡∏Ç‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÇ‡∏î‡∏¢‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏Ç
    length = n - m # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á
    prev = divide_and_conquer_sequence(0, length) # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á 0 ‡∏ñ‡∏∂‡∏á length

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà m
    return [x + m for x in prev] # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á m..n


def base_divide_and_conquer(n):
    """‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 0 ‡∏ñ‡∏∂‡∏á n (‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô)"""
    if n == 0: 
        return [0] # Base case
    prev = base_divide_and_conquer(n // 2) # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏Å‡∏±‡∏ö n//2
    evens = [x * 2 for x in prev if x * 2 <= n] # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà
    odds = [x * 2 + 1 for x in prev if x * 2 + 1 <= n] # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà
    return evens + odds # ‡∏£‡∏ß‡∏°‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà


# ‡πÉ‡∏ä‡πâ base_divide_and_conquer ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå
def divide_and_conquer_sequence(m, n): # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å m..n ‡πÅ‡∏ö‡∏ö Divide and Conquer
    if n < m: # Base case ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        return [] # ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ß‡πà‡∏≤‡∏á
    seq = base_divide_and_conquer(n - m) # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å 0..(n-m)
    return [x + m for x in seq] # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á m..n


# üîπ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö
m = int(input("Enter start m: "))
n = int(input("Enter end n: "))

seq = divide_and_conquer_sequence(m, n) # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å m..n
print("Output:", *seq) # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
#Base Case n==0 ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ O(1)
#Recursive Case n>0 ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏±‡∏ö n//2 ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô O(n)
#‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏° T(n) = 2T(n/2) + O(n) ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô T(n) = O(n log n)
#Space Complexity = O(n)
#worst case ‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ n-m ‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 
#Complexity = O(n-m+1)
#Space complexity = O(n-m+1)