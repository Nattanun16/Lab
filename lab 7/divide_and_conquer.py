def divide_and_conquer_sequence(m, n):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏ö‡∏ö Divide and Conquer ‡∏à‡∏≤‡∏Å m ‡∏ñ‡∏∂‡∏á n"""
    if n < m:
        return []

    if m == n:
        return [m]

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ï‡πà‡∏¢‡∏∑‡∏î‡∏Ç‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÇ‡∏î‡∏¢‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏Ç
    length = n - m
    prev = divide_and_conquer_sequence(0, length)

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà m
    return [x + m for x in prev]


def base_divide_and_conquer(n):
    """‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 0 ‡∏ñ‡∏∂‡∏á n (‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô)"""
    if n == 0:
        return [0]
    prev = base_divide_and_conquer(n // 2)
    evens = [x * 2 for x in prev if x * 2 <= n]
    odds = [x * 2 + 1 for x in prev if x * 2 + 1 <= n]
    return evens + odds


# ‡πÉ‡∏ä‡πâ base_divide_and_conquer ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå
def divide_and_conquer_sequence(m, n):
    if n < m:
        return []
    seq = base_divide_and_conquer(n - m)
    return [x + m for x in seq]


# üîπ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö
m = int(input("Enter start m: "))
n = int(input("Enter end n: "))

seq = divide_and_conquer_sequence(m, n)
print("Output:", *seq)
#Base Case n==0 ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ O(1)
#Recursive Case n>0 ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏±‡∏ö n//2 ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô O(n)
#‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏° T(n) = T(n/2) + O(n) ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô T(n) = O(n)
#Space Complexity = O(n)
#worst case ‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ n-m ‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 
#Complexity = O(n-m+1)
#Space complexity = O(n-m+1)