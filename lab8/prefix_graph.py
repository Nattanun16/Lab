import sys
import matplotlib.pyplot as plt  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏Å‡∏£‡∏≤‡∏ü


def parse_tokens(line, expected_len=None): # ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô
    parts = line.strip().split() # ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ
    if expected_len is not None and len(parts) == 1 and len(parts[0]) == expected_len:
        return list(parts[0]) # ‡πÅ‡∏¢‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    return parts # ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡πÑ‡∏î‡πâ


def compute_prefix(pat): # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏£‡∏≤‡∏á prefix function (pi) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pattern ‡πÉ‡∏ô KMP algorithm
    m = len(pat) # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á pattern
    pi = [0] * m # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ñ‡πà‡∏≤ prefix ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    k = 0 # ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß match ‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    for q in range(1, m): # ‡∏ß‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á pattern
        while k > 0 and pat[k] != pat[q]: # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            k = pi[k - 1] # ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤ pi
        if pat[k] == pat[q]: # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            k += 1 # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß match
        pi[q] = k # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ pi ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á q ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß match ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    return pi # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á prefix function


def naive_search_lr(pat, text): # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ pattern ‡πÉ‡∏ô text ‡πÅ‡∏ö‡∏ö naive ‡∏à‡∏≤‡∏Å‡∏ã‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤
    m, n = len(pat), len(text) # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á pattern ‡πÅ‡∏•‡∏∞ text
    res = [] # ‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö pattern
    for s in range(0, n - m + 1): # ‡∏ß‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô text
        ok = True # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÑ‡∏î‡πâ
        for j in range(m): # ‡∏ß‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏ô pattern
            if text[s + j] != pat[j]: # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏°‡∏ï‡∏ä‡πå
                ok = False
                break # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ
        if ok: # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÑ‡∏î‡πâ
            res.append(s + 1) # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (1-based)
    return res # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö pattern


def naive_search_rl_via_rev(pat, text): # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ pattern ‡πÅ‡∏ö‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö (Right-to-Left) ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏•‡∏¥‡∏Å pattern ‡∏Å‡πà‡∏≠‡∏ô
    pat_rev = pat[::-1] # ‡∏û‡∏•‡∏¥‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö pattern
    m, n = len(pat), len(text) # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á pattern ‡πÅ‡∏•‡∏∞ text
    res_a = [] # ‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö pattern ‡∏û‡∏•‡∏¥‡∏Å
    for s in range(0, n - m + 1): # ‡∏ß‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô text
        ok = True # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÑ‡∏î‡πâ
        for j in range(m): # ‡∏ß‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏ô pattern ‡∏û‡∏•‡∏¥‡∏Å
            if text[s + j] != pat_rev[j]: # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏°‡∏ï‡∏ä‡πå
                ok = False 
                break # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ
        if ok: # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÑ‡∏î‡πâ
            res_a.append(s + 1) # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (1-based)
    return [a + m - 1 for a in res_a] # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö


def visualize_prefix_table(pattern, pi): # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü‡∏Ç‡∏≠‡∏á prefix function
    print("\nüìä Prefix Table Visualization (KMP œÄ-function)")
    print("Index:   ", " ".join(f"{i:2d}" for i in range(len(pattern))))
    print("Pattern: ", " ".join(f"{c:>2}" for c in pattern))
    print("œÄ:       ", " ".join(f"{x:2d}" for x in pi))

    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á
    plt.figure(figsize=(10, 5))
    plt.bar(range(len(pi)), pi, tick_label=pattern, color="skyblue", edgecolor="black")
    plt.title("KMP Prefix Function (œÄ Table) Visualization")
    plt.xlabel("Pattern Characters")
    plt.ylabel("œÄ Value")
    plt.grid(axis="y", linestyle="--", alpha=0.7)
    for i, val in enumerate(pi):
        plt.text(i, val + 0.1, str(val), ha="center", va="bottom", fontsize=10)
    plt.tight_layout()
    plt.show()


def main():
    file_path = "C:\\Users\\user\\Downloads\\8.1.txt"
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            lines = f.read().strip().splitlines()
    except FileNotFoundError:
        print(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file_path}")
        return

    if len(lines) < 4:
        print("‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (charset, m n, pattern, text)")
        return

    line1 = lines[0].strip()
    line2 = lines[1].strip()
    line3 = lines[2].strip()
    line4 = lines[3].strip()

    parts = line2.split()
    m = int(parts[0])
    n = int(parts[1])

    pattern = parse_tokens(line3, expected_len=m)
    text = parse_tokens(line4, expected_len=n)

    pi = compute_prefix(pattern)

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ LR ‡πÅ‡∏•‡∏∞ RL
    lr_positions = naive_search_lr(pattern, text)
    rl_positions = naive_search_rl_via_rev(pattern, text)

    matches = []
    for p in lr_positions:
        matches.append((p, "LR"))
    for p in rl_positions:
        matches.append((p, "RL"))
    matches.sort(key=lambda x: (x[0], 0 if x[1] == "LR" else 1))

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    print(" ".join(str(x) for x in pi))
    print(len(matches))
    for pos, d in matches:
        print(f"{pos} {d}")

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ Visualize
    visualize_prefix_table(pattern, pi)


if __name__ == "__main__":
    main()
